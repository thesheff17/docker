#!/bin/sh -e
#
# /etc/init.d/greenbone-security-assistant
#
### BEGIN INIT INFO
# Provides:          greenbone-security-assistant
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      
# Should-Stop:       
# Default-Start:     
# Default-Stop:      0 6
# Short-Description: Start and stop the Greenbone Security Assistant
# Description:       Controls the OpenVAS daemon "gsad".
### END INIT INFO

# time to wait for daemons death, in seconds
# don't set it too low or you might not let gsad die gracefully
DODTIME=5

# Read config
[ -r /etc/default/greenbone-security-assistant ] && . /etc/default/greenbone-security-assistant

[ "$GSA_ADDRESS" ] && DAEMONOPTS="--listen=$GSA_ADDRESS"
[ "$GSA_PORT" ] && DAEMONOPTS="$DAEMONOPTS --port=$GSA_PORT"
[ "$GSA_SSL_PRIVATE_KEY" ] && DAEMONOPTS="$DAEMONOPTS --ssl-private-key=$GSA_SSL_PRIVATE_KEY"
[ "$GSA_SSL_CERTIFICATE" ] && DAEMONOPTS="$DAEMONOPTS --ssl-certificate=$GSA_SSL_CERTIFICATE"
[ "$GSA_REDIRECT" ] && [ "$GSA_REDIRECT" == 1 ] && DAEMONOPTS="$DAEMONOPTS --redirect"
[ "$GSA_REDIRECT_PORT" ] && DAEMONOPTS="$DAEMONOPTS --rport=$GSA_REDIRECT_PORT"
[ "$ADMINISTRATOR_ADDRESS" ] && DAEMONOPTS="$DAEMONOPTS --alisten=$ADMINISTRATOR_ADDRESS"
[ "$ADMINISTRATOR_PORT" ] && DAEMONOPTS="$DAEMONOPTS --aport=$ADMINISTRATOR_PORT"
[ "$MANAGER_ADDRESS" ] && DAEMONOPTS="$DAEMONOPTS --mlisten=$MANAGER_ADDRESS"
[ "$MANAGER_PORT" ] && DAEMONOPTS="$DAEMONOPTS --mport=$MANAGER_PORT"

DAEMON=/usr/sbin/gsad
PIDFILE=/var/run/gsad.pid
LABEL="Greenbone Security Assistant"

test -x $DAEMON || exit 0


running()
{
    # No pidfile, probably no daemon present
    #
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`

    # No pid, probably no daemon present
    [ -z "$pid" ] && return 1

    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # No gsad?
    [ "$cmd" != "$DAEMON" ] &&  return 1

    return 0
}

start_daemon() {
        start-stop-daemon --start --exec $DAEMON -- $DAEMONOPTS --http-only 2>&1 >/dev/null
	errcode=$?
# If we don't sleep then running() might not see the pidfile
	sleep $DODTIME
	return $errcode
}

force_stop() {
	[ ! -e "$PIDFILE" ] && return
	if running ; then
		kill -15 $pid
	# Is it really dead?
		sleep "$DODTIME"s
		if running ; then
			kill -9 $pid
			sleep "$DODTIME"s
			if running ; then
				echo "Cannot kill $LABEL (pid=$pid)!"
				exit 1
			fi
		fi
	fi
	rm -f $PIDFILE
}

case "$1" in
  start)
    echo -n "Starting $LABEL: "
    if start_daemon && running ;  then
	    echo "gsad."
    else
    	    echo "ERROR."
	    exit 1
    fi
    ;;
  stop)
    echo -n "Stopping $LABEL: "
    if running ; then
	start-stop-daemon --stop --pidfile $PIDFILE --quiet --oknodo --exec $DAEMON
    	sleep "$DODTIME"s
    fi
    if running; then
        force_stop
    fi
    echo "gsad."
      ;;
  restart)
    echo -n "Restarting $LABEL: "
    if running; then
    	start-stop-daemon --stop --pidfile $PIDFILE --quiet --oknodo --exec $DAEMON
    	sleep "$DODTIME"s
    fi
    if running; then
        force_stop
    fi
    if start_daemon && running ;  then
	    echo "gsad."
    else
    	    echo "ERROR."
	    exit 1
    fi
    ;;
  reload|force-reload)
    echo  -n "Reloading $LABEL configuration files: "
    start-stop-daemon --stop --pidfile $PIDFILE --signal 1 --exec $DAEMON
    sleep "$DODTIME"s
    if running ;  then
	    echo "done."
    else
    	    echo "ERROR."
	    exit 1
    fi
    ;;
  status)
    echo -n "$LABEL is "
    if running ;  then
	    echo "running"
    else
    	    echo " not running."
	    exit 1
    fi
    ;;
  *)
    echo "Usage: /etc/init.d/greenbone-security-assistant {start|stop|restart|reload|status}"
    exit 1
    ;;
esac

exit 0

